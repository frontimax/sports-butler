c
self
method
exit
c
method
c
exit
result.response.parsed_response[mode.to_s]
match[mode]
mode
exit
mode
c
result.response.parsed_response[mode.to_s]
result.response.parsed_response
match
mode
mopde
exit
mode
mdoe
result.response.parsed_response
result.response.parsed_response[mode.to_s]
result
mode
exit
meth
c
match
match[mode]
result.response.parsed_response
result.response.parsed_response[mode.to_s]
mode
c
result    = butler.send(endpoint).send(meth, params)
exit
result    = butler.send(endpoint).send(meth, params)
meth
exit
mode
c
Sports::Butler::Configuration.api_endpoint
Sports::Butler::Configuration.api_endpoint[sport][api_name]
c
result.response.parsed_response
result.response.parsed_response['response']
match
exit
build_path(path)
c
exit
result.response.parsed_response['response']
match
exit
c
match
result.response.parsed_response['response']
mode
c
build_path(path)
c
error.message
error
exit
c
expect(butler.bazinga).to raise("NOT AVAILABLE: the endpoint 'bazinga' is not available for this sport/api combination.")
exit
c
exit
butler.bazinga
butler.countrie
butler.countries
expect(butler).to be_a(Sports::Butler::Soccer)
butler
exit
c
match
result.response.parsed_response['response']
c
described_class
self.class.name.demodulize
c
self.api_name
self.class.name.demodulize
class.name.demodulize
c
self.endpoint
self
c
"The endpoint method '#{meth}' is not available for this API."
result
c
result.response.parsed_response
result.response.parsed_response['response']
mode
exit
c
expect(result.response.parsed_response['response']).to match_array(match)
c
expect(result.response.parsed_response['response']).to match_array(match)
c
expect(result.response.parsed_response['response']).to match_array(match)
c
expect(result.response.parsed_response['response']).to match_array(match)
result.response.parsed_response['response']
mode
match
exit
c
endpoint.response.parsed_response
match
c
match
match[mode]
endpoint.response.parsed_response
endpoint.response.parsed_response[mode.to_s]
c
match[mode]
match[mode.to_s]
match
endpoint.response.parsed_response[mode.to_s]
expect(endpoint.response.parsed_response[mode.to_s]).to match_array(match)
c
endpoint.response.parsed_response['mode']
expect(endpoint.response.parsed_response['mode']).to match_array(match)
c
endpoint.response.parsed_response['areas']
endpoint.response.parsed_response
c
expect(endpoint.response.parsed_response).to match_array(match)
endpoint.response.parsed_response
c
endpoint.response.parsed_response
endpoint.response
endpoint
endpoint.response.parsed_response['response']
expect(endpoint.response.parsed_response['response']).to match_array(match)
match
c
expect(endpoint.response.parsed_response['response']).to match_array(eval(compare.to_s))
eval(compare.to_s)
c
eval(compare.to_s)
c
eval(compare.to_s)
c
response_areas_api_dash
response_areas_all_api_dash
response_area_api_dash
response_areas_api_dash_basketball
response_areas_api_dash
c
endpoint
api_name
sport
c
endpoint = described_class.new(sport: sport, api_name: api_name, api: api).by_name(name: 'Albania')
sport
c
it_behaves_like 'returns #all'
c
Dir["#{Dir.pwd}/spec/support/**/*.rb"]
Dir.pwd
Dir["#{Dir.pwd}/../support/**/*.rb"]
Dir["#{Dir.pwd}/support/**/*.rb"]
Dir.pwd
Dir["support/**/*.rb"]
Dir["/support/**/*.rb"]
Dir["../support/**/*.rb"]
c
Rails.root
c
Rails.root
c
Rails.root
c
Rails.root
c
Sports::Butler::Configuration.valid_sport_api?(sport, api_name)
c
Sports::Butler::Configuration.valid_sport_api?(sport, api_name)
c
Sports::Butler::Configuration.valid_sport_api?(sport, api_name)
c
butler.parsed_response['response']
butler.parsed_response[:response]
butler.parsed_response.keys
butler.parsed_response
butler
c
butler
c
butler.class
c
endpoint.response.parsed_response
response_area_football_data_org
response_areas_football_data_org
c
response_areas_football_data_org
endpoint.response.parsed_response
c
Sports::Butler::Configuration.header_token_name
c
Sports::Butler::Configuration.header_token_name
c
Sports::Butler::Configuration.header_token_name
c
Sports::Butler::Configuration.header_token_name
c
Sports::Butler::Configuration.header_token_name
Sports::Butler::Configuration.header_name
Sports::Butler::Configuration
c
Configuration.header_token_name
c
Configuration.header_token_name
c
config.header_token_name
Configuration.header_token_name
config
c
Configuration.api_token
Configuration.header_token_name
c
api_name
sport
c
endpoint.all
endpoint
c
endpoint.all
endpoint
c
endpoint.all
endpoint
expect(endpoint.response.parsed_response).to match_array(response_areas_api_dash)
expect(endpoint.response.parsed_response['response']).to match_array(response_areas_api_dash)
endpoint.response.parsed_response.class
c
stubs_countries_api_dash
"#{Sports::Butler::Configuration.api_endpoint[:soccer][:api_football_com]}/countries"
c
endpoint
c
response
response.response_code
response.parsed_response
response.class
c
endpoint.response.parsed_response['response']
endpoint.response.parsed_response[:response]
endpoint.response.parsed_response.keys
endpoint.response.parsed_response.class
endpoint.response.parsed_response
c
